{"version":3,"sources":["components/sync/Sync.module.css","components/home/Home.module.css","assets/logo.png","Colors.module.css","components/QR.module.css","components/list/List.module.css","components/card/Card.module.css","API/API.js","components/card/Card.jsx","components/QR.jsx","components/list/List.jsx","components/home/Home.jsx","components/sync/Sync.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","API","fetchList","id","get","then","r","data","addTask","text","post","done","createList","title","color","JSON","stringify","name","items","editTask","listId","taskId","task","patch","deleteTask","delete","renameList","newName","createUser","pins","fetchPins","userId","setPins","window","Options","props","className","styles","options","editMode","icon","colorF","onClick","saveFun","editFun","deleteFun","Card","useState","isOptsShown","showOpts","setEditMode","newText","setNewText","markTask","list","update","saveTask","card","active","grid","btn","textDone","textActive","onKeyPress","e","key","preventDefault","input","autoFocus","value","onChange","target","componentDecorator","decoratedHref","decoratedText","href","style","menuBtn","hideFun","markFun","QR","wrapper","link","Header","isCopied","setCopied","newTitle","setNewTitle","isPinned","setPinned","isQRShown","showQR","useEffect","parse","localStorage","getItem","includes","header","titleSection","headerTitle","placeholder","to","cursor","titleButton","add","index","indexOf","splice","unshift","setItem","pinList","copySection","onCopy","copyLink","NewCard","cardText","setCardText","onAdd","document","querySelector","focus","inputWrapper","autoComplete","addButton","opacity","List","useParams","setItems","setTitle","colors","default","setColorF","defaultB","colorB","setColorB","setLink","location","scrollTo","top","behavior","updateHistory","history","pop","redB","red","blueB","blue","greenB","green","darkB","dark","doneItemsComponents","Object","entries","map","item","activeItemsComponents","background","resp","scrollIntoView","pseudoExtender","History","getPins","getHistory","historyItems","el","pin","pinnedItems","ListCard","listProps","setListProps","getListProps","parseColor","colorString","textDecoration","itemWrapper","circle","listName","SyncParams","isSynced","setSynced","syncKey","setSyncKey","isHintShown","showHint","checkSync","storedKey","generateLink","syncWrapper","hint","syncedOptions","localOptions","localPins","Home","setColor","form","colorsSection","colorActive","buttonSection","button","Sync","isDone","setDone","nosync","src","logo","alt","removeItem","App","exact","path","render","component","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,QAAU,sBAAsB,cAAgB,4BAA4B,KAAO,mBAAmB,KAAO,mBAAmB,IAAM,kBAAkB,KAAO,qB,kBCAjLD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,cAAgB,4BAA4B,KAAO,mBAAmB,cAAgB,4BAA4B,OAAS,qBAAqB,MAAQ,oBAAoB,YAAc,0BAA0B,MAAQ,oBAAoB,cAAgB,4BAA4B,OAAS,qBAAqB,QAAU,sBAAsB,YAAc,0BAA0B,SAAW,uBAAuB,OAAS,qBAAqB,YAAc,0BAA0B,cAAgB,4BAA4B,aAAe,2BAA2B,KAAO,mBAAmB,IAAM,oB,mBCDlpBD,EAAOC,QAAU,IAA0B,kC,kBCC3CD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,MAAQ,sBAAsB,KAAO,qBAAqB,KAAO,qBAAqB,QAAU,wBAAwB,KAAO,qBAAqB,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,sBAAsB,SAAW,2B,mBCAvSD,EAAOC,QAAU,CAAC,QAAU,sB,2ECA5BD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,yBAAyB,KAAO,mBAAmB,OAAS,qBAAqB,aAAe,2BAA2B,YAAc,0BAA0B,MAAQ,oBAAoB,YAAc,0BAA0B,YAAc,0BAA0B,SAAW,uBAAuB,aAAe,2BAA2B,MAAQ,oBAAoB,UAAY,wBAAwB,eAAiB,+B,kBCAreD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,IAAM,kBAAkB,QAAU,sBAAsB,KAAO,mBAAmB,OAAS,qBAAqB,SAAW,uBAAuB,QAAU,sBAAsB,KAAO,mBAAmB,MAAQ,sB,kJCCpRC,E,OAAWC,EAAMC,OACnB,CACIC,QAAS,0CACTC,iBAAiB,IAGZC,EAAM,CACfC,UAAW,SAACC,GACR,OAAOP,EAASQ,IAAT,kBAAwBD,EAAxB,UAAmCE,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAExDC,QAAS,SAACL,EAAIM,GACV,OAAOb,EAASc,KAAT,kBAAyBP,EAAzB,eAA0C,CAACM,KAAMA,EAAME,MAAM,IAAQN,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAE1FK,WAAY,SAACC,EAAOC,GAChB,OAAOlB,EAASc,KAAK,eAAgBK,KAAKC,UAAU,CAACC,KAAMJ,EAAOC,MAAOA,EAAOI,MAAO,MAAMb,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAE3GY,SAAU,SAACC,EAAQC,EAAQC,GACvB,OAAO1B,EAAS2B,MAAT,kBAA0BH,EAA1B,kBAA0CC,EAA1C,SAAyD,CAACZ,KAAMa,EAAKb,KAAME,KAAMW,EAAKX,OAAON,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAElHiB,WAAY,SAACJ,EAAQC,GACjB,OAAOzB,EAAS6B,OAAT,kBAA2BL,EAA3B,kBAA2CC,EAA3C,UAA0DhB,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAE/EmB,WAAY,SAACN,EAAQO,GACjB,OAAO/B,EAAS2B,MAAT,kBAA0BH,EAA1B,SAAyC,CAACH,KAAMU,IAAUtB,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAE/EqB,WAAY,WACR,OAAOhC,EAASc,KAAT,YAA2B,CAACmB,KAAM,KAAKxB,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAE5DuB,UAAW,SAACC,GACR,OAAOnC,EAASQ,IAAT,eAAqB2B,EAArB,UAAoC1B,MAAK,SAAAC,GAAC,OAAEA,EAAEC,SAEzDyB,QAAS,SAACD,EAAQF,GACd,OAAOjC,EAAS2B,MAAT,eAAuBQ,EAAvB,SAAsC,CAACF,KAAMA,IAAOxB,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UAI7E0B,OAAOhC,IAAMA,E,qBCjCPiC,EAAU,SAACC,GACb,OAAO,yBAAKC,UAAWC,IAAOC,SACzBH,EAAMI,SACH,yBAAKH,UAAWC,IAAOG,KAAO,IAAML,EAAMM,OAAQC,QAASP,EAAMQ,SAC7D,uBACIP,UAAW,iBAFnB,IAEsC,QAGtC,yBAAKA,UAAWC,IAAOG,KAAO,IAAML,EAAMM,OAAQC,QAASP,EAAMS,SAC7D,uBACIR,UAAW,eAFnB,IAEoC,QAGxC,yBAAKA,UAAWC,IAAOG,KAAO,IAAML,EAAMM,OAAQC,QAASP,EAAMU,WAAW,uBAAGT,UAAU,iBAAzF,aA6EOU,EAxEF,SAACX,GAAW,IAAD,EACUY,oBAAS,GADnB,mBACfC,EADe,KACFC,EADE,OAEUF,oBAAS,GAFnB,mBAEfR,EAFe,KAELW,EAFK,OAGQH,mBAASZ,EAAM1B,MAHvB,mBAGf0C,EAHe,KAGNC,EAHM,KAQdC,EAAW,WACbpD,EAAIkB,SAASgB,EAAMmB,KAAMnB,EAAMhC,GAAI,CAACM,KAAM0B,EAAM1B,KAAME,MAAOwB,EAAMxB,OAAON,MACtE,WACI8B,EAAMoB,OAAOpB,EAAMmB,UAmBzBE,EAAW,WACbvD,EAAIkB,SAASgB,EAAMmB,KAAMnB,EAAMhC,GAAI,CAACM,KAAM0C,EAASxC,KAAMwB,EAAMxB,OAAON,MAClE,WACI6C,GAAY,GACZf,EAAMoB,OAAOpB,EAAMmB,UAI/B,OAAO,yBAAKlB,UAAS,UAAKC,IAAOoB,KAAZ,YAAoBtB,EAAMxB,KAAO0B,IAAO1B,KAAO0B,IAAOqB,SACvE,yBAAKtB,UAAWC,IAAOsB,MACnB,yBAAKvB,UAAWC,IAAOuB,IAAM,IAAMzB,EAAMM,QAAzC,IAAoDN,EAAMxB,KAEtD,uBAAGyB,UAAU,sBAAsBM,QAASW,IAD5C,uBAAGjB,UAAU,gBAAgBM,QAASW,KAE1C,yBACIjB,UAAWD,EAAMxB,KAAO0B,IAAOwB,SAAWxB,IAAOyB,YACjDvB,EAEI,2BAAOwB,WAxBL,SAACC,GACD,UAAVA,EAAEC,MACFD,EAAEE,iBACFV,MAqBsCpB,UAAWC,IAAO8B,MACzCC,WAAW,EAAMC,MAAOlB,EACxBmB,SAAU,SAACN,GACPZ,EAAWY,EAAEO,OAAOF,UAG/B,kBAAC,IAAD,CAASG,mBAAoB,SAACC,EAAeC,EAAeT,GAA/B,OACzB,uBAAGM,OAAO,QAAQI,KAAMF,EAAeR,IAAKA,EAAKW,MAAO,CAAC9D,MAAO,UAC3D,UAGL,8BAAOqB,EAAM1B,QAGzB,yBAAK2B,UAAWC,IAAOuB,IAAM,IAAMzB,EAAMM,QAAQ,uBAC7CtC,GAAIkC,IAAOwC,QACXzC,UAAyB,oBACzBM,QAAS,kBAAMO,GAAUD,QAEhCA,GAAe,kBAAC,EAAD,CACZP,OAAQN,EAAMM,OAAQqC,QA9DV,WAChB7B,GAAS,IA6DuC8B,QAAS1B,EACrDR,UArDW,WACf5C,EAAIuB,WAAWW,EAAMmB,KAAMnB,EAAMhC,IAAIE,MACjC,WACI8B,EAAMoB,OAAOpB,EAAMmB,UAkDAf,SAAUA,EACjCK,QAAS,kBAAMM,GAAY,IAAOP,QAASa,M,0DClFxCwB,EANJ,SAAC7C,GACR,OAAO,yBAAKC,UAAWC,IAAO4C,QAASvC,QAASP,EAAM2C,SAClD,kBAAC,IAAD,CAAQT,MAAOlC,EAAM+C,SCGvBC,EAAS,SAAChD,GAAW,IAAD,EACMY,oBAAS,GADf,mBACjBqC,EADiB,KACPC,EADO,OAEQtC,oBAAS,GAFjB,mBAEjBR,EAFiB,KAEPW,EAFO,OAGQH,mBAASZ,EAAMtB,OAHvB,mBAGjByE,EAHiB,KAGPC,EAHO,OAIMxC,oBAAS,GAJf,mBAIjByC,EAJiB,KAIPC,EAJO,OAKI1C,oBAAS,GALb,mBAKjB2C,EALiB,KAKNC,EALM,KAOtBC,qBACI,WACI,IAAI/D,EAAOd,KAAK8E,MAAMC,aAAaC,QAAQ,SAC3CR,EAAYpD,EAAMtB,OAClB4E,EAAmB,OAAT5D,GAAiBA,EAAKmE,SAAS7D,EAAMf,WAChD,CAACe,EAAMf,OAAQoE,EAAUrD,EAAMtB,QAiCtC,OAAO,yBAAKuB,UAAWC,IAAO4D,QAC1B,yBAAK7D,UAAWC,IAAO6D,cACnB,yBAAK9D,UAAWC,IAAO8D,aAClB5D,EAEG,2BAAO6B,WAAW,EAAMgC,YAAa,eAAgB9B,SAAU,SAACN,GAC5DuB,EAAYvB,EAAEO,OAAOF,QAElBA,MAAOiB,IAEd,yBAAKlD,UAAWC,IAAOxB,OAAO,kBAAC,IAAD,CAASuB,UAAWC,IAAO6C,KAAO,IAAM/C,EAAMrB,MACrCuF,GAAI,KAAM,aAC7C,0BAAM3D,QAAS,kBAAMQ,GAAY,IAAO0B,MAAO,CAAC0B,OAAQ,YAAanE,EAAMtB,QAAiB,KAIvG0B,GAAY,yBAAKH,UAAWC,IAAOkE,aAChC,uBACInE,UAAW,eACXM,QA3BD,WACXzC,EAAIyB,WAAWS,EAAMf,OAAqB,KAAbkE,EAAkBnD,EAAMtB,MAAQyE,GAAUjF,MAAK,WACxE6C,GAAY,GACZf,EAAMoB,OAAOpB,EAAMf,gBA0BjBmB,GAAY,yBAAKH,UAAWC,IAAOkE,YAAa7D,QAAS,YAnDnD,SAAC8D,GACb,IAAI3E,EAAOd,KAAK8E,MAAMC,aAAaC,QAAQ,SACvC9B,EAAM6B,aAAaC,QAAQ,WAI/B,GAFa,OAATlE,IAAeA,EAAO,IAEtBA,EAAKmE,SAAS7D,EAAMf,QAAS,CAC7B,IAAIqF,EAAQ5E,EAAK6E,QAAQvE,EAAMf,QAC/BS,EAAK8E,OAAOF,EAAO,GAEnBD,GACA3E,EAAK+E,QAAQzE,EAAMf,QACnBqE,GAAU,IAGVA,GAAU,GAEdK,aAAae,QAAQ,OAAQ9F,KAAKC,UAAUa,IACrC,OAAPoC,GAAehE,EAAI+B,QAAQiC,EAAKpC,GAChCM,EAAMoB,OAAOpB,EAAMf,QAgCiD0F,EAAStB,KACrE,uBACIpD,UAAWoD,EAAW,cAAgB,kBAIlD,yBAAKpD,UAAWC,IAAO0E,aACnB,kBAAC,kBAAD,CAAiBtG,KAAM0B,EAAM+C,KAAM8B,OAAQ,kBAAM3B,GAAU,KACvD,yBAAKjD,UAAWC,IAAO4E,UACnB,uBAAG7E,UAAWgD,EAAW,eAAiB,mBAItD,yBAAKhD,UAAWC,IAAO0E,aACnB,yBAAK3E,UAAWC,IAAO4E,SAAUvE,QAAS,kBAAIiD,GAAO,KACjD,uBAAGvD,UAAW,mBAEjBsD,GAAa,kBAAC,EAAD,CAAIR,KAAM/C,EAAM+C,KAAMJ,QAAS,kBAAIa,GAAO,SAK9DuB,EAAU,SAAC/E,GAAW,IAAD,EACOY,mBAAS,IADhB,mBAClBoE,EADkB,KACRC,EADQ,KAMjBC,EAAQ,WACO,KAAbF,IACJhF,EAAM3B,QAAQ2G,GACdC,EAAY,IACZE,SAASC,cAAc,UAAUC,UAUrC,OAAO,yBAAKpF,UAAWC,IAAOoF,aAActH,GAAI,WAC5C,2BAAOuH,aAAa,MAAMvH,GAAI,QAASiG,YAAY,cAAchE,UAAWC,IAAO8B,MAAOE,MAAO8C,EAC1F7C,SApBS,SAACN,GACjBoD,EAAYpD,EAAEO,OAAOF,QAmBSN,WAThB,SAACC,GACD,UAAVA,EAAEC,MACFD,EAAEE,iBACFmD,QAOJ,yBAAKjF,UAAWC,IAAOsF,UAAY,IAAMxF,EAAMrB,MAAO8D,MAAoB,KAAbuC,EAAkB,CAACS,QAAS,GAAK,CAACA,QAAS,IACnGlF,QAAS2E,GAAO,uBAAGjF,UAAU,0BA2G3ByF,EAvGF,WAAO,IACX1H,EAAM2H,cAAN3H,GADU,EAES4C,mBAAS,IAFlB,mBAEV7B,EAFU,KAEH6G,EAFG,OAGShF,mBAAS,IAHlB,mBAGVlC,EAHU,KAGHmH,EAHG,OAIWjF,mBAASkF,IAAOC,SAJ3B,mBAIVzF,EAJU,KAIF0F,EAJE,OAKWpF,mBAASkF,IAAOG,UAL3B,mBAKVC,EALU,KAKFC,EALE,OAMOvF,mBAAS,IANhB,mBAMVmC,EANU,KAMJqD,EANI,KAQf3C,qBACI,WACI2C,EAAQtG,OAAOuG,SAAS7D,MACxB1C,OAAOwG,SAAS,CAACC,IAAK,EAAGC,SAAU,aAEpC,IAGP/C,qBACI,WACI1F,EAAUC,KACX,CAACA,IAGR,IAAMyI,EAAgB,WAClB,IAAIC,EAAU9H,KAAK8E,MAAMC,aAAaC,QAAQ,YAC1ClE,EAAOd,KAAK8E,MAAMC,aAAaC,QAAQ,SAI3C,GAHa,OAATlE,IAAeA,EAAO,IACV,OAAZgH,IAAkBA,EAAU,IAE5BA,EAAQ7C,SAAS7F,GAAK,CACtB,IAAIsG,EAAQoC,EAAQnC,QAAQvG,GAC5B0I,EAAQlC,OAAOF,EAAO,GAG1B,GAAK5E,EAAKmE,SAAS7F,GACd,CACD,IAAIsG,EAAQ5E,EAAK6E,QAAQvG,GACzB0B,EAAK8E,OAAOF,EAAO,GACnB5E,EAAK+E,QAAQzG,GACb2F,aAAae,QAAQ,OAAQ9F,KAAKC,UAAUa,SALxBgH,EAAQjC,QAAQzG,GAAM,IAAM0I,EAAQC,MAO5DhD,aAAae,QAAQ,UAAW9F,KAAKC,UAAU6H,KAK7C3I,EAAY,SAACC,GACfF,EAAIC,UAAUC,GAAIE,MAAK,SAAAC,GAGnB,GAFAsI,IAES,MAALtI,EAGJ,OAFAyH,EAASzH,EAAEY,OACX8G,EAAS1H,EAAEW,MACHX,EAAEQ,OACN,IAAK,MACDwH,EAAUL,IAAOc,MACjBZ,EAAUF,IAAOe,KACjB,MACJ,IAAK,OACDV,EAAUL,IAAOgB,OACjBd,EAAUF,IAAOiB,MACjB,MACJ,IAAK,QACDZ,EAAUL,IAAOkB,QACjBhB,EAAUF,IAAOmB,OACjB,MACJ,IAAK,OACDd,EAAUL,IAAOoB,OACjBlB,EAAUF,IAAOqB,MACjB,MACJ,QACIhB,EAAUL,IAAOG,UACjBD,EAAUF,IAAOC,cAa3BqB,EAAsBrI,EAAQsI,OAAOC,QAAQvI,GAAOwI,KAAI,YAAkB,IAAD,mBAAfzF,EAAe,KAAV0F,EAAU,KAC3E,GAAIA,EAAKhJ,KAAM,OAAO,kBAAC,EAAD,CAAM8B,OAAQA,EAAQ9B,KAAMgJ,EAAKhJ,KAAMF,KAAMkJ,EAAKlJ,KAAMwD,IAAKA,EAAK9D,GAAI8D,EAAKX,KAAMnD,EAC3EoD,OAAQrD,OACnC,KACC0J,EAAwB1I,EAAQsI,OAAOC,QAAQvI,GAAOwI,KAAI,YAAkB,IAAD,mBAAfzF,EAAe,KAAV0F,EAAU,KAC7E,IAAKA,EAAKhJ,KAAM,OAAO,kBAAC,EAAD,CAAM8B,OAAQA,EAAQ9B,KAAMgJ,EAAKhJ,KAAMF,KAAMkJ,EAAKlJ,KAAMwD,IAAKA,EAAK9D,GAAI8D,EAAKX,KAAMnD,EAC3EoD,OAAQrD,OACpC,KAEL,OAAO,yBAAKkC,UAAS,UAAKC,IAAOwH,WAAZ,YAA0BxB,IAC3C,kBAAC,EAAD,CAAQxH,MAAOA,EAAOO,OAAQjB,EAAIoD,OAAQrD,EAAWgF,KAAMA,EAAMpE,MAAO2B,IACxE,yBAAKL,UAAWC,IAAOiB,MAClBiG,EACAK,EACD,kBAAC,EAAD,CAASpJ,QAvBD,SAACC,GACbR,EAAIO,QAAQL,EAAIM,GAAMJ,MAClB,SAACyJ,GACGA,EAAK7I,MAAQf,EAAUC,GACvBmH,SAASC,cAAc,YAAYwC,qBAmBZjJ,MAAO2B,IAClC,yBAAKL,UAAWC,IAAO2H,oB,wBCrK7BC,EAAU,SAAC9H,GAAW,IAAD,EAECY,mBAAS,IAFV,mBAElB7B,EAFkB,KAEX6G,EAFW,OAGDhF,mBAAS,IAHR,mBAGlBlB,EAHkB,KAGZG,EAHY,KAIvB4D,qBACI,WACIsE,IACAC,MACD,IAEP,IAAMD,EAAU,WACZ,IAAIjG,EAAM6B,aAAaC,QAAQ,WAC/B,GAAS,MAAL9B,EAEAhE,EAAI6B,UAAUmC,GAAK5D,MACf,SAAAC,GACY,MAALA,GACC0B,EAAQ1B,EAAEuB,MACViE,aAAae,QAAQ,OAAQ9F,KAAKC,UAAUV,EAAEuB,SAG9CG,EAAQ,IACR8D,aAAae,QAAQ,OAAQ9F,KAAKC,UAAU,aAKvD,CACD,IAAIa,EAAOiE,aAAaC,QAAQ,QACpB,MAARlE,GACAG,EAAQjB,KAAK8E,MAAMhE,MAIzBsI,EAAa,WACf,IAAItB,EAAU/C,aAAaC,QAAQ,WACpB,MAAX8C,GACAd,EAAShH,KAAK8E,MAAMgD,KAGxBuB,EAAelJ,EAAMwI,KACrB,SAACW,GACG,OAAO,kBAAC,EAAD,CAAUlK,GAAIkK,EAAIpG,IAAKoG,EAAIC,KAAK,OAG3CC,EAAc1I,EAAK6H,KACnB,SAACW,GACG,OAAO,kBAAC,EAAD,CAAUlK,GAAIkK,EAAIpG,IAAKoG,EAAIC,KAAK,OAI/C,OAAO,yBAAKlI,UAAWC,IAAOwG,SACzB0B,EACAH,IAIHI,EAAW,SAACrI,GAAW,IAAD,EAEQY,mBAAS,IAFjB,mBAEnB0H,EAFmB,KAERC,EAFQ,KAIxB9E,qBAAU,WACN+E,MACD,CAACxI,EAAMhC,KAEV,IAAMyK,EAAa,SAACC,GAChB,OAAQA,GACJ,IAAK,MACD,OAAO5C,IAAOe,IAClB,IAAK,QACD,OAAOf,IAAOmB,MAClB,IAAK,OACD,OAAOnB,IAAOqB,KAClB,IAAK,OACD,OAAOrB,IAAOiB,KAClB,QACI,OAAOjB,IAAOC,UAIpByC,EAAe,WACjB1K,EAAIC,UAAUiC,EAAMhC,IAAIE,MACpB,SAACC,GAEOoK,EADK,MAALpK,EACa,CAACW,KAAMX,EAAEW,KAAMH,MAAO8J,EAAWtK,EAAEQ,QAEnC,CAACG,KAAK,kBAAoBH,MAAOmH,IAAOC,cAKrE,OAAO,kBAAC,IAAD,CAAS7B,GAAE,WAAMlE,EAAMhC,IACdyE,MAAO,CAACkG,eAAgB,OAAQhK,MAAO,UACnD,yBAAKsB,UAAWC,IAAO0I,YAAanG,MAAO6F,EAAUxJ,KAAO,CAAC2G,QAAS,GAAK,CAACA,QAAS,IACjF,yBAAKxF,UAAWC,IAAO2I,OAAS,IAAMP,EAAU3J,OAC3C2J,EAAU3J,OAAS,uBAAGsB,UAAWD,EAAMmI,IAAM,cAAgB,mBAElE,yBAAKlI,UAAWC,IAAO4I,UAAWR,EAAUxJ,MAAQ,OAK1DiK,EAAa,WAAO,IAAD,EACOnI,oBAAS,GADhB,mBAChBoI,EADgB,KACNC,EADM,OAEOrI,mBAAS,MAFhB,mBAEhBsI,EAFgB,KAEPC,EAFO,OAGCvI,mBAAS,IAHV,mBAGhBmC,EAHgB,KAGVqD,EAHU,OAIOxF,oBAAS,GAJhB,mBAIhBqC,EAJgB,KAINC,EAJM,OAKKtC,oBAAS,GALd,mBAKhB2C,EALgB,KAKLC,EALK,OAMS5C,oBAAS,GANlB,mBAMhBwI,EANgB,KAMHC,EANG,KAQrB5F,qBAAU,WACN6F,MACD,CAACN,IAEJ,IAAMM,EAAY,WACd,IAAIC,EAAY5F,aAAaC,QAAQ,WACrCqF,EAAuB,MAAbM,GACVJ,EAAWI,GACXnD,EAAQoD,IAGNA,EAAe,WACjB,OAAO1J,OAAOuG,SAAS7D,KAAO,QAAU0G,GAkB5C,OAAO,yBAAKjJ,UAAWC,IAAOuJ,YAAahH,MAAO2G,GAAe7F,EAAY,GAAG,CAACkC,QAAS,KAElFuD,EACI,yBAAK/I,UAAWC,IAAO8I,UAClBI,GAAe,yBAAKnJ,UAAWC,IAAOwJ,MAAvB,uFAAiH,kBAAC,IAAD,CAASjH,MAAO,CAAC9D,MAAO,SAAUuF,GAAI,WAAtC,iBACjI,yBAAKjE,UAAWC,IAAOyJ,eACnB,kBAAC,kBAAD,CAAiBrL,KAAMyE,EAAM8B,OAAQ,kBAAI3B,GAAU,KAAO,yBAAKjD,UAAWC,IAAOuB,KAAK,uBAAGxB,UAAWgD,EAAW,eAAgB,gBAAiBA,EAAW,SAAU,cACrK,yBAAKhD,UAAWC,IAAOuB,IAAKlB,QAAS,kBAAIiD,GAAO,KAAO,uBAAGvD,UAAW,kBAArE,MACCsD,GAAa,kBAAC,EAAD,CAAIR,KAAMA,EAAMJ,QAAS,kBAAIa,GAAO,MAClD,yBAAKvD,UAAWC,IAAOuB,IAAKlB,QAAS,kBAAI8I,GAAUD,KAAc,uBAAGnJ,UAAWmJ,EAAc,oBAAqB,wBAAlH,UAMR,yBAAKnJ,UAAWC,IAAO8I,UAClBI,GAAe,yBAAKnJ,UAAWC,IAAOwJ,MAAvB,0HAChB,yBAAKzJ,UAAWC,IAAO0J,cAEnB,yBAAK3J,UAAWC,IAAOuB,IAAKlB,QAnC7B,WACfzC,EAAI2B,aAAavB,MACb,SAAAC,GACI,GAAS,MAALA,EAAW,CACX,IAAI0L,EAAYjL,KAAK8E,MAAMC,aAAaC,QAAQ,SAChD9F,EAAI+B,QAAQ1B,EAAEW,KAAM+K,GAAW3L,MAAK,WAChCiL,EAAWhL,EAAEW,MACbmK,GAAU,GACV7C,EAAQoD,KACR7F,aAAae,QAAQ,UAAWvG,EAAEW,eA0Be,uBAAGmB,UAAW,iBAA/D,aAEA,yBAAKA,UAAWC,IAAOuB,IAAKlB,QAAS,kBAAI8I,GAAUD,KAAc,uBAAGnJ,UAAWmJ,EAAc,oBAAqB,wBAAlH,YAOTU,EA1NF,WAAO,IAAD,EAESlJ,mBAAS,OAFlB,mBAEVjC,EAFU,KAEHoL,EAFG,OAGSnJ,mBAAS,IAHlB,mBAGVlC,EAHU,KAGHmH,EAHG,OAIOjF,mBAAS,IAJhB,mBAIVmC,EAJU,KAIJqD,EAJI,KAMT3H,EAAa,WACfX,EAAIW,WAAqB,KAAVC,EAAeA,EAAQ,WAAYC,GAAOT,MACrD,SAACC,GACGiI,EAAQ,IAAMjI,EAAEW,UAW5B,MAAa,KAATiE,EAAoB,kBAAC,IAAD,CAAUmB,GAAInB,IAC/B,yBAAK9C,UAAWC,IAAO4C,SAC1B,6BACI,kBAAC,EAAD,MACA,yBAAK7C,UAAWC,IAAO8J,MACnB,yBAAK/J,UAAWC,IAAO8B,OACnB,2BAAOJ,WAbL,SAACC,GACD,UAAVA,EAAEC,MACFD,EAAEE,iBACFtD,MAUsCwF,YAAa,cAAe/B,MAAOxD,EAC1DyD,SAAU,SAACN,GAAD,OAAOgE,EAAShE,EAAEO,OAAOF,WAE9C,yBAAKjC,UAAWC,IAAO+J,eACnB,yBAAKhK,UAAWC,IAAO4F,QACnB,yBAAK7F,WAAsB,QAAVtB,EAAkBuB,IAAOgK,YAAchK,IAAOvB,OAAS,IAAMmH,IAAOc,KAChFrG,QAAS,kBAAMwJ,EAAS,UAC7B,yBAAK9J,WAAsB,UAAVtB,EAAoBuB,IAAOgK,YAAchK,IAAOvB,OAAS,IAAMmH,IAAOkB,OAClFzG,QAAS,kBAAMwJ,EAAS,YAC7B,yBAAK9J,WAAsB,SAAVtB,EAAmBuB,IAAOgK,YAAchK,IAAOvB,OAAS,IAAMmH,IAAOgB,MACjFvG,QAAS,kBAAMwJ,EAAS,WAC7B,yBAAK9J,WAAsB,SAAVtB,EAAmBuB,IAAOgK,YAAchK,IAAOvB,OAAS,IAAMmH,IAAOoB,MACjF3G,QAAS,kBAAMwJ,EAAS,aAGrC,yBAAK9J,UAAWC,IAAOiK,eACnB,yBAAKlK,UAAWC,IAAOkK,OAAQ7J,QAAS9B,GAAxC,iBAGR,kBAAC,EAAD,S,kCCfG4L,EAlCF,SAACrK,GAAW,IACfhC,EAAO2H,cAAP3H,GADc,EAEI4C,oBAAS,GAFb,mBAEf0J,EAFe,KAEPC,EAFO,KAYpB,OAAID,EAAe,kBAAC,IAAD,CAAUpG,GAAI,MAE7BlE,EAAMwK,OAAe,yBAAKvK,UAAWC,IAAO4C,SAC5C,yBAAK7C,UAAWC,IAAO8J,MACnB,yBAAKS,IAAKC,IAAMzK,UAAWC,IAAOwK,KAAMC,IAAI,SAC5C,2GACA,yBAAK1K,UAAWC,IAAOuB,IAAKlB,QAXrB,WACXoD,aAAaiH,WAAW,WACxBL,GAAQ,KASyC,uBAAGtK,UAAW,iBAA3D,iBACA,yBAAKA,UAAWC,IAAO6C,MAAM,kBAAC,IAAD,CAASmB,GAAI,IAAKzB,MAAO,CAAC9D,MAAO,UAAjC,aAK9B,yBAAKsB,UAAWC,IAAO4C,SAC1B,yBAAK7C,UAAWC,IAAO8J,MACnB,yBAAKS,IAAKC,IAAMzK,UAAWC,IAAOwK,KAAMC,IAAI,SAC5C,8HACA,yBAAK1K,UAAWC,IAAOuB,IAAKlB,QAzBvB,WACVoD,aAAae,QAAQ,UAAW1G,GAC/BuM,GAAQ,KAuBuC,uBAAGtK,UAAW,iBAAzD,eACA,yBAAKA,UAAWC,IAAO6C,MAAM,kBAAC,IAAD,CAASmB,GAAI,IAAKzB,MAAO,CAAC9D,MAAO,UAAjC,cCZ1BkM,EAfH,WACR,OACI,yBAAK5K,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO6K,OAAK,EAACC,KAAM,YAAaC,OAAQ,kBAAI,kBAAC,EAAD,SAC5C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAM,UAAWC,OAAQ,kBAAI,kBAAC,EAAD,CAAMR,QAAM,OACtD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAM,IAAKE,UAAWnB,IACnC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAM,OAAQE,UAAWvF,Q,MCHtCwF,QACW,cAA7BpL,OAAOuG,SAAS8E,UAEe,UAA7BrL,OAAOuG,SAAS8E,UAEhBrL,OAAOuG,SAAS8E,SAASC,MACvB,2DCZNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFnG,SAASoG,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxN,MAAK,SAAAyN,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51c0c8b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sync_wrapper__3nDo8\",\"AnimationName\":\"Sync_AnimationName__1dH4-\",\"form\":\"Sync_form__1UUcD\",\"logo\":\"Sync_logo__2Efod\",\"btn\":\"Sync_btn__TqCn-\",\"link\":\"Sync_link__3QI0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Home_wrapper__21I8r\",\"AnimationName\":\"Home_AnimationName__129wy\",\"form\":\"Home_form__2PVZc\",\"colorsSection\":\"Home_colorsSection__1qhpQ\",\"colors\":\"Home_colors__Wn3v2\",\"color\":\"Home_color__SxRST\",\"colorActive\":\"Home_colorActive__TtI0C\",\"input\":\"Home_input__g22eg\",\"buttonSection\":\"Home_buttonSection__3IyhQ\",\"button\":\"Home_button__2bu16\",\"history\":\"Home_history__BbYal\",\"itemWrapper\":\"Home_itemWrapper__15sR6\",\"listName\":\"Home_listName__yPDAa\",\"circle\":\"Home_circle__3OO7o\",\"syncWrapper\":\"Home_syncWrapper__cWi-O\",\"syncedOptions\":\"Home_syncedOptions__2Ubl0\",\"localOptions\":\"Home_localOptions__2rxR5\",\"hint\":\"Home_hint__3fEJU\",\"btn\":\"Home_btn__w4qdg\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d97cd11c.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Colors_red__2umzL\",\"green\":\"Colors_green__26MeA\",\"blue\":\"Colors_blue__3RJOr\",\"dark\":\"Colors_dark__1UBtV\",\"default\":\"Colors_default__1OxFX\",\"redB\":\"Colors_redB__3E4Kk\",\"greenB\":\"Colors_greenB__VAT1Q\",\"blueB\":\"Colors_blueB__1Wfjx\",\"darkB\":\"Colors_darkB__31ZA4\",\"defaultB\":\"Colors_defaultB__XvoLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"QR_wrapper__2ReFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"List_list__3Y7K_\",\"background\":\"List_background__38Tqr\",\"link\":\"List_link__3S9sQ\",\"header\":\"List_header__1dY2M\",\"titleSection\":\"List_titleSection__2ygVl\",\"headerTitle\":\"List_headerTitle__1KaA3\",\"title\":\"List_title__2nKQA\",\"titleButton\":\"List_titleButton__2bwLa\",\"copySection\":\"List_copySection__3tSQk\",\"copyLink\":\"List_copyLink__2y28D\",\"inputWrapper\":\"List_inputWrapper__haad0\",\"input\":\"List_input__1a24L\",\"addButton\":\"List_addButton__2tGz8\",\"pseudoExtender\":\"List_pseudoExtender__1oyS8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3MKhb\",\"grid\":\"Card_grid__3qjAA\",\"btn\":\"Card_btn__1icHr\",\"menuBtn\":\"Card_menuBtn__3nbt5\",\"done\":\"Card_done__1-s6X\",\"active\":\"Card_active__2XdAX\",\"textDone\":\"Card_textDone__6XGo6\",\"options\":\"Card_options__2zSzB\",\"icon\":\"Card_icon__38c_C\",\"input\":\"Card_input__1HGG_\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create(\r\n    {\r\n        baseURL: \"https://todo-list-4b27a.firebaseio.com/\",\r\n        withCredentials: false\r\n    }\r\n)\r\nexport const API = {\r\n    fetchList: (id) => {\r\n        return instance.get(`storage/${id}.json`).then(r=>r.data)\r\n    },\r\n    addTask: (id, text) => {\r\n        return instance.post(`storage/${id}/items.json`, {text: text, done: false}).then(r=>r.data)\r\n    },\r\n    createList: (title, color) => {\r\n        return instance.post('storage.json', JSON.stringify({name: title, color: color, items: []})).then(r=>r.data)\r\n    },\r\n    editTask: (listId, taskId, task) => {\r\n        return instance.patch(`storage/${listId}/items/${taskId}.json`, {text: task.text, done: task.done}).then(r=>r.data)\r\n    },\r\n    deleteTask: (listId, taskId) => {\r\n        return instance.delete(`storage/${listId}/items/${taskId}.json`).then(r=>r.data)\r\n    },\r\n    renameList: (listId, newName) => {\r\n        return instance.patch(`storage/${listId}.json`, {name: newName}).then(r=>r.data)\r\n    },\r\n    createUser: () => {\r\n        return instance.post(`pins.json`, {pins: {}}).then(r=>r.data)\r\n    },\r\n    fetchPins: (userId) => {\r\n        return instance.get(`pins/${userId}.json`).then(r=>r.data)\r\n    },\r\n    setPins: (userId, pins) => {\r\n        return instance.patch(`pins/${userId}.json`, {pins: pins}).then(r=>r.data)\r\n    }\r\n\r\n}\r\nwindow.API = API;\r\n\r\n","import React, {useState} from 'react'\r\nimport styles from './Card.module.css'\r\nimport {API} from \"../../API/API\";\r\nimport Linkify from \"react-linkify\"\r\n\r\nconst Options = (props) => {\r\n    return <div className={styles.options}>\r\n        {props.editMode ?\r\n            <div className={styles.icon + ' ' + props.colorF} onClick={props.saveFun}>\r\n                <i\r\n                    className={'fas fa-check'}/> {'Save'}\r\n            </div>\r\n            :\r\n            <div className={styles.icon + ' ' + props.colorF} onClick={props.editFun}>\r\n                <i\r\n                    className={'fas fa-pen'}/> {'Edit'}\r\n            </div>\r\n        }\r\n        <div className={styles.icon + ' ' + props.colorF} onClick={props.deleteFun}><i className='fas fa-trash'/> Delete\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Card = (props) => {\r\n    let [isOptsShown, showOpts] = useState(false)\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [newText, setNewText] = useState(props.text)\r\n\r\n    const hideOptions = () => {\r\n        showOpts(false)\r\n    }\r\n    const markTask = () => {\r\n        API.editTask(props.list, props.id, {text: props.text, done: !props.done}).then(\r\n            () => {\r\n                props.update(props.list)\r\n            }\r\n        )\r\n    }\r\n    const deleteTask = () => {\r\n        API.deleteTask(props.list, props.id).then(\r\n            () => {\r\n                props.update(props.list)\r\n            }\r\n        )\r\n    }\r\n\r\n    const listenKey = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            saveTask()\r\n        }\r\n    }\r\n\r\n    const saveTask = () => {\r\n        API.editTask(props.list, props.id, {text: newText, done: props.done}).then(\r\n            () => {\r\n                setEditMode(false)\r\n                props.update(props.list)\r\n            }\r\n        )\r\n    }\r\n    return <div className={`${styles.card} ${props.done ? styles.done : styles.active}`}>\r\n        <div className={styles.grid}>\r\n            <div className={styles.btn + ' ' + props.colorF}> {!props.done ?\r\n                <i className='far fa-circle' onClick={markTask}/> :\r\n                <i className='fas fa-check-circle' onClick={markTask}/>}</div>\r\n            <div\r\n                className={props.done ? styles.textDone : styles.textActive}>{\r\n                editMode\r\n                    ?\r\n                    <input onKeyPress={listenKey} className={styles.input}\r\n                           autoFocus={true} value={newText}\r\n                           onChange={(e) => {\r\n                               setNewText(e.target.value)\r\n                           }}/>\r\n                    :\r\n                    <Linkify componentDecorator={(decoratedHref, decoratedText, key) => (\r\n                        <a target=\"blank\" href={decoratedHref} key={key} style={{color: \"black\"}}>\r\n                            {'Link'}\r\n                        </a>\r\n                    )}>\r\n                        <span>{props.text}</span>\r\n                    </Linkify>}\r\n            </div>\r\n            <div className={styles.btn + ' ' + props.colorF}><i\r\n                id={styles.menuBtn}\r\n                className={isOptsShown ? 'fas fa-ellipsis-h' : 'fas fa-ellipsis-h'}\r\n                onClick={() => showOpts(!isOptsShown)}/></div>\r\n        </div>\r\n        {isOptsShown && <Options\r\n            colorF={props.colorF} hideFun={hideOptions} markFun={markTask}\r\n            deleteFun={deleteTask} editMode={editMode}\r\n            editFun={() => setEditMode(true)} saveFun={saveTask}/>}\r\n    </div>\r\n}\r\nexport default Card","import React from 'react'\r\nimport styles from './QR.module.css'\r\nimport QRCode from 'qrcode.react'\r\n\r\nconst QR = (props) => {\r\n    return <div className={styles.wrapper} onClick={props.hideFun}>\r\n        <QRCode value={props.link}/>\r\n    </div>\r\n}\r\n\r\nexport default QR","import React, {useEffect, useState} from 'react'\r\nimport styles from './List.module.css'\r\nimport Card from \"../card/Card\";\r\nimport {NavLink, useParams} from 'react-router-dom'\r\nimport {API} from \"../../API/API\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport colors from './../../Colors.module.css'\r\nimport QR from \"../QR\";\r\n\r\nconst Header = (props) => {\r\n    let [isCopied, setCopied] = useState(false)\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [newTitle, setNewTitle] = useState(props.title)\r\n    let [isPinned, setPinned] = useState(false)\r\n    let [isQRShown, showQR] = useState(false)\r\n\r\n    useEffect(\r\n        () => {\r\n            let pins = JSON.parse(localStorage.getItem('pins'))\r\n            setNewTitle(props.title)\r\n            setPinned(pins !== null && pins.includes(props.listId))\r\n        }, [props.listId, isPinned, props.title]\r\n    )\r\n\r\n    const pinList = (add) => {\r\n        let pins = JSON.parse(localStorage.getItem('pins'))\r\n        let key = localStorage.getItem('syncKey')\r\n\r\n        if (pins === null) pins = []\r\n\r\n        if (pins.includes(props.listId)) {\r\n            let index = pins.indexOf(props.listId);\r\n            pins.splice(index, 1);\r\n        }\r\n        if (add) {\r\n            pins.unshift(props.listId) //> 100 && pins.pop() //I'm not sure if I need to limit pins\r\n            setPinned(true)\r\n        }\r\n        else\r\n            setPinned(false)\r\n\r\n        localStorage.setItem('pins', JSON.stringify(pins))\r\n        key !==null && API.setPins(key, pins)\r\n        props.update(props.listId)\r\n    }\r\n\r\n    const rename = () => {\r\n        API.renameList(props.listId, newTitle === '' ? props.title : newTitle).then(() => {\r\n            setEditMode(false)\r\n            props.update(props.listId)\r\n        })\r\n    }\r\n\r\n\r\n    return <div className={styles.header}>\r\n        <div className={styles.titleSection}>\r\n            <div className={styles.headerTitle}>\r\n                {editMode\r\n                    ?\r\n                    <input autoFocus={true} placeholder={'New title...'} onChange={(e) => {\r\n                        setNewTitle(e.target.value)\r\n                    }}\r\n                           value={newTitle}/>\r\n                    :\r\n                    <div className={styles.title}><NavLink className={styles.link + ' ' + props.color}\r\n                                                           to={'/'}>{'ToDoDoLi:'}</NavLink>{\r\n                        <span onClick={() => setEditMode(true)} style={{cursor: \"pointer\"}}>{props.title}</span> || ''}\r\n                    </div>\r\n                }\r\n            </div>\r\n            {editMode && <div className={styles.titleButton}>\r\n                <i\r\n                    className={'fas fa-check'}\r\n                    onClick={rename}/>\r\n            </div>}\r\n            {!editMode && <div className={styles.titleButton} onClick={()=>{pinList(!isPinned); }}>\r\n                <i\r\n                    className={isPinned ? 'fas fa-star' : 'far fa-star'}\r\n                />\r\n            </div>}\r\n        </div>\r\n        <div className={styles.copySection}>\r\n            <CopyToClipboard text={props.link} onCopy={() => setCopied(true)}>\r\n                <div className={styles.copyLink}>\r\n                    <i className={isCopied ? 'fas fa-check' : 'fas fa-link'}/>\r\n                </div>\r\n            </CopyToClipboard>\r\n        </div>\r\n        <div className={styles.copySection}>\r\n            <div className={styles.copyLink} onClick={()=>showQR(true)}>\r\n                <i className={'fas fa-qrcode'}/>\r\n            </div>\r\n            {isQRShown && <QR link={props.link} hideFun={()=>showQR(false)}/>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst NewCard = (props) => {\r\n    let [cardText, setCardText] = useState('')\r\n    const updateInput = (e) => {\r\n        setCardText(e.target.value)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (cardText === '') return\r\n        props.addTask(cardText)\r\n        setCardText('')\r\n        document.querySelector('#input').focus()\r\n\r\n    }\r\n    const listenKey = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            onAdd()\r\n        }\r\n    }\r\n\r\n    return <div className={styles.inputWrapper} id={'addCard'}>\r\n        <input autoComplete=\"off\" id={'input'} placeholder='New task...' className={styles.input} value={cardText}\r\n               onChange={updateInput} onKeyPress={listenKey}/>\r\n        <div className={styles.addButton + ' ' + props.color} style={cardText !== '' ? {opacity: 1} : {opacity: .6}}\r\n             onClick={onAdd}><i className='fas fa-plus-circle'/></div>\r\n    </div>\r\n}\r\n\r\nconst List = () => {\r\n    let {id} = useParams()\r\n    let [items, setItems] = useState({})\r\n    let [title, setTitle] = useState('')\r\n    let [colorF, setColorF] = useState(colors.default) // Yeah I know how weird it is\r\n    let [colorB, setColorB] = useState(colors.defaultB)\r\n    let [link, setLink] = useState('')\r\n\r\n    useEffect(\r\n        () => {\r\n            setLink(window.location.href)\r\n            window.scrollTo({top: 0, behavior: \"smooth\"})\r\n\r\n        }, []\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            fetchList(id)\r\n        }, [id]\r\n    )\r\n\r\n    const updateHistory = () => {\r\n        let history = JSON.parse(localStorage.getItem('history'))\r\n        let pins = JSON.parse(localStorage.getItem('pins'))\r\n        if (pins === null) pins = []\r\n        if (history === null) history = []\r\n\r\n        if (history.includes(id)) {\r\n            let index = history.indexOf(id);\r\n            history.splice(index, 1);\r\n\r\n        }\r\n        if (!pins.includes(id)) history.unshift(id) > 10 && history.pop()\r\n        else {\r\n            let index = pins.indexOf(id);\r\n            pins.splice(index, 1);\r\n            pins.unshift(id)\r\n            localStorage.setItem('pins', JSON.stringify(pins))\r\n        }\r\n        localStorage.setItem('history', JSON.stringify(history))\r\n\r\n    }\r\n\r\n\r\n    const fetchList = (id) => {\r\n        API.fetchList(id).then(r => {\r\n            updateHistory()\r\n\r\n            if (r == null) return\r\n            setItems(r.items)\r\n            setTitle(r.name)\r\n            switch (r.color) {\r\n                case 'red':\r\n                    setColorB(colors.redB)\r\n                    setColorF(colors.red)\r\n                    break\r\n                case 'blue':\r\n                    setColorB(colors.blueB)\r\n                    setColorF(colors.blue)\r\n                    break\r\n                case 'green':\r\n                    setColorB(colors.greenB)\r\n                    setColorF(colors.green)\r\n                    break\r\n                case 'dark':\r\n                    setColorB(colors.darkB)\r\n                    setColorF(colors.dark)\r\n                    break\r\n                default:\r\n                    setColorB(colors.defaultB)\r\n                    setColorF(colors.default)\r\n            }\r\n        })\r\n    }\r\n    const addTask = (text) => {\r\n        API.addTask(id, text).then(\r\n            (resp) => {\r\n                resp.name && fetchList(id)\r\n                document.querySelector('#addCard').scrollIntoView()\r\n            }\r\n        )\r\n    }\r\n\r\n    const doneItemsComponents = items ? Object.entries(items).map(([key, item]) => {\r\n        if (item.done) return <Card colorF={colorF} done={item.done} text={item.text} key={key} id={key} list={id}\r\n                                    update={fetchList}/>\r\n    }) : null\r\n    const activeItemsComponents = items ? Object.entries(items).map(([key, item]) => {\r\n        if (!item.done) return <Card colorF={colorF} done={item.done} text={item.text} key={key} id={key} list={id}\r\n                                     update={fetchList}/>\r\n    }) : null\r\n\r\n    return <div className={`${styles.background} ${colorB}`}>\r\n        <Header title={title} listId={id} update={fetchList} link={link} color={colorF}/>\r\n        <div className={styles.list}>\r\n            {doneItemsComponents}\r\n            {activeItemsComponents}\r\n            <NewCard addTask={addTask} color={colorF}/>\r\n            <div className={styles.pseudoExtender}/>\r\n        </div>\r\n    </div>\r\n}\r\nexport default List","import React, {useEffect, useState} from 'react'\r\nimport styles from './Home.module.css'\r\nimport colors from '../../Colors.module.css'\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {API} from \"../../API/API\";\r\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\r\nimport QR from \"../QR\";\r\n\r\n\r\nconst Home = () => {\r\n\r\n    let [color, setColor] = useState('red')\r\n    let [title, setTitle] = useState('')\r\n    let [link, setLink] = useState('')\r\n\r\n    const createList = () => {\r\n        API.createList(title !== '' ? title : 'New list', color).then(\r\n            (r) => {\r\n                setLink('/' + r.name)\r\n            }\r\n        )\r\n    }\r\n    const listenKey = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            createList()\r\n        }\r\n    }\r\n\r\n    if (link !== '') return <Redirect to={link}/>\r\n    return <div className={styles.wrapper}>\r\n        <div>\r\n            <SyncParams/>\r\n            <div className={styles.form}>\r\n                <div className={styles.input}>\r\n                    <input onKeyPress={listenKey} placeholder={'New List...'} value={title}\r\n                           onChange={(e) => setTitle(e.target.value)}/>\r\n                </div>\r\n                <div className={styles.colorsSection}>\r\n                    <div className={styles.colors}>\r\n                        <div className={(color === 'red' ? styles.colorActive : styles.color) + ' ' + colors.redB}\r\n                             onClick={() => setColor('red')}/>\r\n                        <div className={(color === 'green' ? styles.colorActive : styles.color) + ' ' + colors.greenB}\r\n                             onClick={() => setColor('green')}/>\r\n                        <div className={(color === 'blue' ? styles.colorActive : styles.color) + ' ' + colors.blueB}\r\n                             onClick={() => setColor('blue')}/>\r\n                        <div className={(color === 'dark' ? styles.colorActive : styles.color) + ' ' + colors.darkB}\r\n                             onClick={() => setColor('dark')}/>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.buttonSection}>\r\n                    <div className={styles.button} onClick={createList}>Create List</div>\r\n                </div>\r\n            </div>\r\n            <History/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst History = (props) => {\r\n\r\n    let [items, setItems] = useState([])\r\n    let [pins, setPins] = useState([])\r\n    useEffect(\r\n        () => {\r\n            getPins()\r\n            getHistory()\r\n        }, []\r\n    )\r\n    const getPins = () => {\r\n        let key = localStorage.getItem('syncKey')\r\n        if (key!=null)\r\n        {\r\n            API.fetchPins(key).then(\r\n                r=>{\r\n                    if(r != null) {\r\n                        setPins(r.pins)\r\n                        localStorage.setItem('pins', JSON.stringify(r.pins))\r\n                    }\r\n                    else {\r\n                        setPins([])\r\n                        localStorage.setItem('pins', JSON.stringify([]))\r\n                    }\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            let pins = localStorage.getItem('pins')\r\n            if (pins != null)\r\n                setPins(JSON.parse(pins))\r\n        }\r\n    }\r\n\r\n    const getHistory = () => {\r\n        let history = localStorage.getItem('history')\r\n        if (history != null)\r\n            setItems(JSON.parse(history))\r\n    }\r\n\r\n    let historyItems = items.map(\r\n        (el) => {\r\n            return <ListCard id={el} key={el} pin={false}/>\r\n        }\r\n    )\r\n    let pinnedItems = pins.map(\r\n        (el) => {\r\n            return <ListCard id={el} key={el} pin={true}/>\r\n        }\r\n    )\r\n\r\n    return <div className={styles.history}>\r\n        {pinnedItems}\r\n        {historyItems}\r\n    </div>\r\n}\r\n\r\nconst ListCard = (props) => {\r\n\r\n    let [listProps, setListProps] = useState({})\r\n\r\n    useEffect(() => {\r\n        getListProps()\r\n    }, [props.id])\r\n\r\n    const parseColor = (colorString) => {\r\n        switch (colorString) {\r\n            case 'red':\r\n                return colors.red\r\n            case 'green':\r\n                return colors.green\r\n            case 'dark':\r\n                return colors.dark\r\n            case 'blue':\r\n                return colors.blue\r\n            default:\r\n                return colors.default\r\n        }\r\n    }\r\n\r\n    const getListProps = () => {\r\n        API.fetchList(props.id).then(\r\n            (r) => {\r\n                if (r != null)\r\n                    setListProps({name: r.name, color: parseColor(r.color)})\r\n                else\r\n                    setListProps({name: `It's a bug, lol`, color: colors.default})\r\n            }\r\n        )\r\n    }\r\n\r\n    return <NavLink to={`/${props.id}`}\r\n                    style={{textDecoration: \"none\", color: \"black\"}}>\r\n        <div className={styles.itemWrapper} style={listProps.name ? {opacity: 1} : {opacity: 0}}>\r\n            <div className={styles.circle + ' ' + listProps.color}>\r\n                {listProps.color && <i className={props.pin ? 'fas fa-star' : 'fas fa-circle'}/>}\r\n            </div>\r\n            <div className={styles.listName}>{listProps.name || ''}</div>\r\n        </div>\r\n    </NavLink>\r\n}\r\n\r\nconst SyncParams = () => {\r\n    let [isSynced, setSynced] = useState(false)\r\n    let [syncKey, setSyncKey] = useState(null)\r\n    let [link, setLink] = useState('')\r\n    let [isCopied, setCopied] = useState(false)\r\n    let [isQRShown, showQR] = useState(false)\r\n    let [isHintShown, showHint] = useState(false)\r\n\r\n    useEffect(() => {\r\n        checkSync()\r\n    }, [isSynced])\r\n\r\n    const checkSync = () => {\r\n        let storedKey = localStorage.getItem('syncKey')\r\n        setSynced(storedKey != null)\r\n        setSyncKey(storedKey)\r\n        setLink(generateLink)\r\n    }\r\n\r\n    const generateLink = () => {\r\n        return window.location.href + 'sync/' + syncKey\r\n    }\r\n    const createUser = () => {\r\n        API.createUser().then(\r\n            r => {\r\n                if (r != null) {\r\n                    let localPins = JSON.parse(localStorage.getItem('pins'))\r\n                    API.setPins(r.name, localPins).then(()=>{\r\n                        setSyncKey(r.name)\r\n                        setSynced(true)\r\n                        setLink(generateLink())\r\n                        localStorage.setItem('syncKey', r.name)\r\n                    })\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    return <div className={styles.syncWrapper} style={isHintShown || isQRShown ? {}:{opacity: .6}}>\r\n        {\r\n            isSynced ?\r\n                <div className={styles.isSynced}>\r\n                    {isHintShown && <div className={styles.hint}>Your pinned lists are cloud stored. You can sync a new device using the link below. <NavLink style={{color: 'black'}} to={'/nosync'}>Disable sync</NavLink></div>}\r\n                    <div className={styles.syncedOptions}>\r\n                        <CopyToClipboard text={link} onCopy={()=>setCopied(true)}><div className={styles.btn}><i className={isCopied ? 'fas fa-check': 'fas fa-link'}/>{isCopied ? 'Copied': 'Copy link'}</div></CopyToClipboard>\r\n                        <div className={styles.btn} onClick={()=>showQR(true)}><i className={'fas fa-qrcode'}/>QR</div>\r\n                        {isQRShown && <QR link={link} hideFun={()=>showQR(false)}/>}\r\n                        <div className={styles.btn} onClick={()=>showHint(!isHintShown)}><i className={isHintShown ? 'fas fa-chevron-up' :'fas fa-chevron-down'}/>Hint</div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                :\r\n                <div className={styles.isSynced}>\r\n                    {isHintShown && <div className={styles.hint}>This devise shows your local pins. Start with creating a Cloud for pins. You'll be able to sync your connected devices</div>}\r\n                    <div className={styles.localOptions}>\r\n\r\n                        <div className={styles.btn} onClick={createUser}><i className={'fas fa-cloud'}/>New Cloud</div>\r\n\r\n                        <div className={styles.btn} onClick={()=>showHint(!isHintShown)}><i className={isHintShown ? 'fas fa-chevron-up' :'fas fa-chevron-down'}/>Hint</div>\r\n                    </div>\r\n                </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Home","import React, {useState} from 'react'\r\nimport styles from './Sync.module.css'\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom'\r\nimport logo from '../../assets/logo.png'\r\n\r\nconst Sync = (props) => {\r\n    let { id } = useParams()\r\n    let [isDone, setDone] = useState(false)\r\n    const sync = () => {\r\n       localStorage.setItem('syncKey', id)\r\n        setDone(true)\r\n    }\r\n    const noSync = () => {\r\n        localStorage.removeItem('syncKey')\r\n        setDone(true)\r\n\r\n    }\r\n    if (isDone) return <Redirect to={'/'}/>\r\n\r\n    if (props.nosync) return <div className={styles.wrapper}>\r\n        <div className={styles.form}>\r\n            <img src={logo} className={styles.logo} alt='logo'/>\r\n            <div>Note that this device will be no longer synchronized with your cloud pins.</div>\r\n            <div className={styles.btn} onClick={noSync}><i className={'fas fa-plane'}/> Disable sync</div>\r\n            <div className={styles.link}><NavLink to={'/'} style={{color: 'black'}}>Cancel</NavLink></div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    return <div className={styles.wrapper}>\r\n        <div className={styles.form}>\r\n            <img src={logo} className={styles.logo} alt='logo'/>\r\n            <div>Your device is going to be synchronized with your cloud pins. Your local pins will be erased.</div>\r\n            <div className={styles.btn} onClick={sync}><i className={'fas fa-cloud'}/>Enable sync</div>\r\n            <div className={styles.link}><NavLink to={'/'} style={{color: 'black'}}>Cancel</NavLink></div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Sync","import React from 'react';\nimport './App.css';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport List from \"./components/list/List\";\nimport Home from './components/home/Home'\nimport Sync from \"./components/sync/Sync\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Switch>\n                    <Route exact path={'/sync/:id'} render={()=><Sync/>}/>\n                    <Route exact path={'/nosync'} render={()=><Sync nosync/>}/>\n                    <Route exact path={'/'} component={Home}/>\n                    <Route exact path={'/:id'} component={List}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}